import { Plugin } from 'vite';
import { VitePluginUniResolvedOptions } from '..';
export declare function createConfigResolved(options: VitePluginUniResolvedOptions): ((config: Readonly<Omit<import("vite").UserConfig, "alias" | "dedupe" | "optimizeDeps" | "worker" | "plugins" | "assetsInclude"> & {
    configFile: string | undefined;
    configFileDependencies: string[];
    inlineConfig: import("vite").InlineConfig;
    root: string;
    base: string;
    publicDir: string;
    cacheDir: string;
    command: "build" | "serve";
    mode: string;
    isWorker: boolean;
    isProduction: boolean;
    env: Record<string, any>;
    resolve: import("vite").ResolveOptions & {
        alias: import("vite").Alias[];
    };
    plugins: readonly Plugin[];
    server: import("vite").ResolvedServerOptions;
    build: Required<Omit<import("vite").BuildOptions, "base" | "cleanCssOptions" | "polyfillDynamicImport" | "brotliSize">>;
    preview: import("vite").ResolvedPreviewOptions;
    assetsInclude: (file: string) => boolean;
    logger: import("vite").Logger;
    createResolver: (options?: Partial<import("vite").InternalResolveOptions> | undefined) => import("vite").ResolveFn;
    optimizeDeps: Omit<import("vite").DepOptimizationOptions, "keepNames">;
    worker: import("vite").ResolveWorkerOptions;
}>) => void | Promise<void>) | undefined;
