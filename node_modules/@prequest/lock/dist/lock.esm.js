import { AsyncPromise } from '@xdoer/x';

class Lock {
  constructor(opt) {
    this.opt = opt;
    this.on = false;
    const {
      promise,
      resolve
    } = new AsyncPromise();
    this.promise = promise;
    this.resolvePromise = resolve;
  }

  async getValue() {
    return this.opt.getValue();
  }

  async setValue(value) {
    return this.opt.setValue(value);
  }

  async clear() {
    if (this.on) return;
    const {
      promise,
      resolve
    } = new AsyncPromise();
    this.promise = promise;
    this.resolvePromise = resolve;
    return this.opt.clearValue();
  }

  static createLockWrapper(lock) {
    return async function (fn) {
      if (lock.on) return lock.promise;
      lock.on = true;
      const value = (await lock.getValue()) || (await fn());
      await lock.setValue(value);
      lock.on = false;
      lock.resolvePromise(value);
      return value;
    };
  }

}

export default Lock;
//# sourceMappingURL=lock.esm.js.map
