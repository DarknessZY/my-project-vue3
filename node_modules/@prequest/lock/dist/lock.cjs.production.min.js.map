{"version":3,"file":"lock.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { AsyncPromise } from '@xdoer/x'\nimport { Options } from './types'\n\nexport type LockOptions = Options\n\nexport default class Lock {\n  on = false\n\n  constructor(private opt: Options) {\n    const { promise, resolve } = new AsyncPromise()\n    this.promise = promise\n    this.resolvePromise = resolve\n  }\n\n  async getValue() {\n    return this.opt.getValue()\n  }\n\n  async setValue(value: any) {\n    return this.opt.setValue(value)\n  }\n\n  async clear() {\n    if (this.on) return\n    const { promise, resolve } = new AsyncPromise()\n    this.promise = promise\n    this.resolvePromise = resolve\n    return this.opt.clearValue()\n  }\n\n  resolvePromise: any\n  promise: Promise<any>\n\n  static createLockWrapper(lock: Lock) {\n    return async function(fn: () => Promise<any>) {\n      if (lock.on) return lock.promise\n\n      lock.on = true\n\n      const value = (await lock.getValue()) || (await fn())\n      await lock.setValue(value)\n\n      lock.on = false\n\n      lock.resolvePromise(value)\n\n      return value\n    }\n  }\n}\n"],"names":["constructor","opt","promise","resolve","AsyncPromise","resolvePromise","this","getValue","value","setValue","on","clearValue","lock","async","fn"],"mappings":"oHAQEA,YAAoBC,YAAAA,WAFf,QAGGC,QAAEA,EAAFC,QAAWA,GAAY,IAAIC,oBAC5BF,QAAUA,OACVG,eAAiBF,0BAIfG,KAAKL,IAAIM,0BAGHC,UACNF,KAAKL,IAAIQ,SAASD,oBAIrBF,KAAKI,GAAI,aACPR,QAAEA,EAAFC,QAAWA,GAAY,IAAIC,2BAC5BF,QAAUA,OACVG,eAAiBF,EACfG,KAAKL,IAAIU,sCAMOC,UAChBC,eAAeC,MAChBF,EAAKF,GAAI,OAAOE,EAAKV,QAEzBU,EAAKF,IAAK,QAEJF,QAAeI,EAAKL,kBAAsBO,iBAC1CF,EAAKH,SAASD,GAEpBI,EAAKF,IAAK,EAEVE,EAAKP,eAAeG,GAEbA"}