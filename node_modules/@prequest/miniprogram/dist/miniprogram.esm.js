import { PreQuest } from '@prequest/core';
export { PreQuest } from '@prequest/core';
import { createRequestUrl, createError, ErrorCode } from '@prequest/helper';

function adapter(request) {
  return opt => {
    return new Promise((resolve, reject) => {
      const finalOption = opt || {};
      const url = createRequestUrl(finalOption);
      const {
        getNativeRequestInstance,
        cancelToken,
        ...rest
      } = finalOption;
      const instance = request({
        url,
        ...rest,
        success: resolve,
        fail: reject
      });

      if (cancelToken) {
        cancelToken.promise.then(cancel => {
          if (!instance) return; // 如果支持取消方法

          if (instance.abort) return instance.abort(); // 如果不支持，则直接抛出错误

          reject(createError(ErrorCode.abort, cancel, opt));
        });
      }

      getNativeRequestInstance === null || getNativeRequestInstance === void 0 ? void 0 : getNativeRequestInstance(instance);
    });
  };
}

function create(core, options, wrapper) {
  if (wrapper === void 0) {
    wrapper = v => v;
  }

  return PreQuest.create(wrapper(adapter(core)), options);
}

export { adapter, create };
//# sourceMappingURL=miniprogram.esm.js.map
