import { stringify } from 'qs';
import { isAbsoluteURL, isEmpty } from '@xdoer/x';

class PQError extends Error {
  constructor(opt) {
    super();
    this.opt = opt;
    const {
      code,
      config
    } = this.opt || {};
    this.code = code;
    this.config = config;
  }

}
var ErrorCode;

(function (ErrorCode) {
  ErrorCode["timeout"] = "timeout";
  ErrorCode["abort"] = "abort";
  ErrorCode["common"] = "common";
})(ErrorCode || (ErrorCode = {}));

function createError(code, message, opt) {
  const error = new Error(message);
  return enhanceError(error, code, opt);
}
function enhanceError(error, code, opt) {
  error.code = code;
  error.config = opt;
  return error;
}

const baseOption = {
  path: '/',
  method: 'GET'
};
function createRequestUrl(req) {
  const {
    baseURL,
    path,
    params
  } = req;
  let url = req.url || '';

  if (isAbsoluteURL(path)) {
    url += path;
  } else {
    if (baseURL) url += baseURL;
    if (path) url += path;
  }

  if (params && !isEmpty(params)) url += `?${stringify(params)}`;
  return url;
}
function requestId(options) {
  return createRequestUrl({ ...options,
    params: {}
  });
}

export { ErrorCode, PQError, baseOption, createError, createRequestUrl, enhanceError, requestId };
//# sourceMappingURL=helper.esm.js.map
