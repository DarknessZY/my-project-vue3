{"version":3,"file":"core.cjs.development.js","sources":["../src/Middleware.ts","../src/constant.ts","../src/index.ts"],"sourcesContent":["import { MiddlewareCallback, Common, Context } from '@prequest/types'\n\nexport class Middleware {\n  protected cbs: MiddlewareCallback[] = []\n\n  static globalCbs: any = []\n\n  protected exec(ctx: Context, next: MiddlewareCallback, injectOpt: Common = {}) {\n    let times = -1\n    const cbs = <MiddlewareCallback[]>[...Middleware.globalCbs, ...this.cbs]\n    const dispatch = (pointer = 0): Promise<any> => {\n      if (cbs.length < pointer) return Promise.resolve()\n\n      const fn = cbs[pointer] || next\n\n      if (pointer <= times) throw new Error('next function only can be called once')\n      times = pointer\n\n      return fn(ctx, () => dispatch(++pointer), injectOpt)\n    }\n\n    return dispatch()\n  }\n\n  use(cb: MiddlewareCallback) {\n    this.cbs.push(cb)\n    return this\n  }\n\n  static use(cb: MiddlewareCallback) {\n    Middleware.globalCbs.push(cb)\n    return Middleware\n  }\n}\n","import { Method } from '@prequest/types'\n\nexport const METHODS: Method[] = ['get', 'post', 'delete', 'put', 'patch', 'head', 'options']\n","import {\n  Adapter,\n  Config,\n  MethodsCallback,\n  PQRequest,\n  PQResponse,\n  PreQuestInstance,\n  Context,\n  MiddlewareInjectOptions,\n} from '@prequest/types'\nimport { merge } from '@xdoer/x'\nimport { Middleware } from './Middleware'\nimport { METHODS } from './constant'\n\nexport class PreQuest extends Middleware {\n  constructor(private adapter: Adapter, private config?: Config) {\n    super()\n    this.mount()\n  }\n\n  private mount() {\n    const preQuest = <MethodsCallback>(this as unknown)\n\n    METHODS.forEach(method => {\n      preQuest[method] = (path: string, config?: Config) => {\n        const request = <PQRequest>(\n          merge(\n            PreQuest.defaults,\n            this.config,\n            { path, method: method.toUpperCase() } as any,\n            config!\n          )\n        )\n        const response = <PQResponse>{}\n        return this.controller({ request, response, context: this })\n      }\n    })\n  }\n\n  request<Q>(path: string | Config, config?: Config): Promise<PQResponse<Q>> {\n    const request = <PQRequest>(\n      merge(PreQuest.defaults, this.config, typeof path === 'string' ? { path, ...config } : path)\n    )\n    const response = <PQResponse>{}\n    return this.controller<Q>({ request, response, context: this })\n  }\n\n  async controller<Q>(ctx: Context, opt: MiddlewareInjectOptions = {}): Promise<PQResponse<Q>> {\n    await this.exec(\n      ctx,\n      async ctx => {\n        ctx.response = await this.adapter(ctx.request)\n      },\n      opt\n    )\n    return ctx.response as any\n  }\n\n  static defaults: Config = {}\n\n  static create(adapter: Adapter, config?: Config): PreQuestInstance {\n    const instance = new PreQuest(adapter, config)\n\n    const request: any = (path: string | Config, config?: Config) => {\n      return instance.request(path, config)\n    }\n\n    Reflect.setPrototypeOf(request, instance)\n\n    return request\n  }\n}\n"],"names":["Middleware","constructor","exec","ctx","next","injectOpt","times","cbs","globalCbs","dispatch","pointer","length","Promise","resolve","fn","Error","use","cb","push","METHODS","PreQuest","adapter","config","mount","preQuest","forEach","method","path","request","merge","defaults","toUpperCase","response","controller","context","opt","create","instance","Reflect","setPrototypeOf"],"mappings":"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"}