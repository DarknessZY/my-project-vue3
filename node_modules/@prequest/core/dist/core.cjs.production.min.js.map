{"version":3,"file":"core.cjs.production.min.js","sources":["../src/Middleware.ts","../src/constant.ts","../src/index.ts"],"sourcesContent":["import { MiddlewareCallback, Common, Context } from '@prequest/types'\n\nexport class Middleware {\n  protected cbs: MiddlewareCallback[] = []\n\n  static globalCbs: any = []\n\n  protected exec(ctx: Context, next: MiddlewareCallback, injectOpt: Common = {}) {\n    let times = -1\n    const cbs = <MiddlewareCallback[]>[...Middleware.globalCbs, ...this.cbs]\n    const dispatch = (pointer = 0): Promise<any> => {\n      if (cbs.length < pointer) return Promise.resolve()\n\n      const fn = cbs[pointer] || next\n\n      if (pointer <= times) throw new Error('next function only can be called once')\n      times = pointer\n\n      return fn(ctx, () => dispatch(++pointer), injectOpt)\n    }\n\n    return dispatch()\n  }\n\n  use(cb: MiddlewareCallback) {\n    this.cbs.push(cb)\n    return this\n  }\n\n  static use(cb: MiddlewareCallback) {\n    Middleware.globalCbs.push(cb)\n    return Middleware\n  }\n}\n","import { Method } from '@prequest/types'\n\nexport const METHODS: Method[] = ['get', 'post', 'delete', 'put', 'patch', 'head', 'options']\n","import {\n  Adapter,\n  Config,\n  MethodsCallback,\n  PQRequest,\n  PQResponse,\n  PreQuestInstance,\n  Context,\n  MiddlewareInjectOptions,\n} from '@prequest/types'\nimport { merge } from '@xdoer/x'\nimport { Middleware } from './Middleware'\nimport { METHODS } from './constant'\n\nexport class PreQuest extends Middleware {\n  constructor(private adapter: Adapter, private config?: Config) {\n    super()\n    this.mount()\n  }\n\n  private mount() {\n    const preQuest = <MethodsCallback>(this as unknown)\n\n    METHODS.forEach(method => {\n      preQuest[method] = (path: string, config?: Config) => {\n        const request = <PQRequest>(\n          merge(\n            PreQuest.defaults,\n            this.config,\n            { path, method: method.toUpperCase() } as any,\n            config!\n          )\n        )\n        const response = <PQResponse>{}\n        return this.controller({ request, response, context: this })\n      }\n    })\n  }\n\n  request<Q>(path: string | Config, config?: Config): Promise<PQResponse<Q>> {\n    const request = <PQRequest>(\n      merge(PreQuest.defaults, this.config, typeof path === 'string' ? { path, ...config } : path)\n    )\n    const response = <PQResponse>{}\n    return this.controller<Q>({ request, response, context: this })\n  }\n\n  async controller<Q>(ctx: Context, opt: MiddlewareInjectOptions = {}): Promise<PQResponse<Q>> {\n    await this.exec(\n      ctx,\n      async ctx => {\n        ctx.response = await this.adapter(ctx.request)\n      },\n      opt\n    )\n    return ctx.response as any\n  }\n\n  static defaults: Config = {}\n\n  static create(adapter: Adapter, config?: Config): PreQuestInstance {\n    const instance = new PreQuest(adapter, config)\n\n    const request: any = (path: string | Config, config?: Config) => {\n      return instance.request(path, config)\n    }\n\n    Reflect.setPrototypeOf(request, instance)\n\n    return request\n  }\n}\n"],"names":["Middleware","constructor","exec","ctx","next","injectOpt","times","cbs","globalCbs","this","dispatch","pointer","length","Promise","resolve","fn","Error","use","cb","push","METHODS","PreQuest","adapter","config","mount","preQuest","forEach","method","path","request","merge","defaults","toUpperCase","controller","response","context","opt","async","instance","Reflect","setPrototypeOf"],"mappings":"oGAEaA,EAAbC,uBACwC,GAI5BC,KAAKC,EAAcC,EAA0BC,YAAAA,IAAAA,EAAoB,QACrEC,GAAS,QACPC,EAA4B,IAAIP,EAAWQ,aAAcC,KAAKF,KAC9DG,EAAW,SAACC,eAAAA,IAAAA,EAAU,GACtBJ,EAAIK,OAASD,EAAS,OAAOE,QAAQC,gBAEnCC,EAAKR,EAAII,IAAYP,KAEvBO,GAAWL,EAAO,MAAM,IAAIU,MAAM,gDACtCV,EAAQK,EAEDI,EAAGZ,EAAK,IAAMO,IAAWC,GAAUN,WAGrCK,IAGTO,IAAIC,eACGX,IAAIY,KAAKD,GACPT,gBAGES,UACTlB,EAAWQ,UAAUW,KAAKD,GACnBlB,GA1BFA,YAAiB,GCHnB,MAAMoB,EAAoB,CAAC,MAAO,OAAQ,SAAU,MAAO,QAAS,OAAQ,iBCYtEC,UAAiBrB,EAC5BC,YAAoBqB,EAA0BC,wBAA1BD,cAA0BC,OAEvCC,QAGCA,cACAC,EAA6BhB,KAEnCW,EAAQM,QAAQC,IACdF,EAASE,GAAU,CAACC,EAAcL,WAC1BM,EACJC,QACET,EAASU,SACTtB,KAAKc,OACL,CAAEK,KAAAA,EAAMD,OAAQA,EAAOK,eACvBT,UAIGd,KAAKwB,WAAW,CAAEJ,QAAAA,EAASK,SADL,GACeC,QAAS1B,UAK3DoB,QAAWD,EAAuBL,SAC1BM,EACJC,QAAMT,EAASU,SAAUtB,KAAKc,OAAwB,iBAATK,EAAoB,CAAEA,KAAAA,KAASL,GAAWK,UAGlFnB,KAAKwB,WAAc,CAAEJ,QAAAA,EAASK,SADR,GACkBC,QAAS1B,wBAGtCN,EAAciC,mBAAAA,IAAAA,EAA+B,UACzD3B,KAAKP,KACTC,EACAkC,MAAAA,IACElC,EAAI+B,eAAiBzB,KAAKa,QAAQnB,EAAI0B,UAExCO,GAEKjC,EAAI+B,uBAKCZ,EAAkBC,SACxBe,EAAW,IAAIjB,EAASC,EAASC,GAEjCM,EAAe,CAACD,EAAuBL,IACpCe,EAAST,QAAQD,EAAML,UAGhCgB,QAAQC,eAAeX,EAASS,GAEzBT,GAXFR,WAAmB"}