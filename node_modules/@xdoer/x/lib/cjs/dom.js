"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertAfter = exports.getWindowSize = exports.getScrollPosition = exports.getDomPath = exports.createScript = exports.addClassName = exports.$ = void 0;

/**
 * 查找DOM
 */
const $ = name => document.querySelector(name);
/**
 * 为元素添加类名
 * @param element DOM元素
 * @param value 要添加的类名
 */


exports.$ = $;

const addClassName = (element, value) => {
  element.classList.add(value);
};
/**
 * 获取元素滚动位置
 */


exports.addClassName = addClassName;

const getScrollPosition = () => {
  return {
    top: document.documentElement.scrollTop || document.body.scrollTop,
    left: document.documentElement.scrollLeft || document.body.scrollLeft
  };
};
/**
 * 获取窗口大小
 */


exports.getScrollPosition = getScrollPosition;

const getWindowSize = () => {
  return {
    width: globalThis.innerWidth || document.documentElement.clientWidth,
    height: globalThis.innerHeight || document.documentElement.clientHeight
  };
};
/**
 * 元素后插入节点
 * @param newElement 要插入的新元素
 * @param targetElement 插入的目标元素
 */


exports.getWindowSize = getWindowSize;

const insertAfter = (newElement, targetElement) => {
  const parent = targetElement.parentNode;
  if (!parent) return;

  if (parent.lastChild === targetElement) {
    parent.appendChild(newElement);
  } else {
    parent.insertBefore(newElement, targetElement.nextSibling);
  }
};
/**
 * 动态插入 script 到 html
 * @param url
 * @param callback
 */


exports.insertAfter = insertAfter;

const createScript = (url, callback) => {
  const _script = document.createElement('script');

  _script.type = 'text/javascript';
  _script.async = true;
  _script.src = url;

  _script.onload = function () {
    callback && callback();
  };

  document.body.appendChild(_script);
};
/**
 * 获取DOM元素路径
 * @param ele DOM元素
 */


exports.createScript = createScript;

const getDomPath = ele => {
  const prefix = ' ';
  const parentNodeIsCommonNode = ele.parentElement && ele.parentElement.nodeType === 1;
  if (!ele.parentElement || !ele.parentNode) return ''; // 处理ID

  if (ele.id) {
    // 这里递归 ele.parentNode，类型不匹配
    return getDomPath(ele.parentElement) + `${parentNodeIsCommonNode ? prefix : ''}#${ele.id} `;
  } // 处理类


  if (ele.className) {
    const classList = ele.classList;
    const classDesc = ele.tagName.toLowerCase() + [...classList].map(n => '.' + n).join('');

    if (parentNodeIsCommonNode) {
      const nodes = ele.parentNode.querySelectorAll(classDesc);

      if (nodes.length > 1) {
        for (let i = 0; i < nodes.length; i++) {
          if (nodes[i] === ele) {
            return getDomPath(ele.parentElement) + `${(parentNodeIsCommonNode ? prefix : '') + classDesc}:nth-of-type(${i + 1})`;
          }
        }
      } else {
        return getDomPath(ele.parentElement) + (parentNodeIsCommonNode ? prefix : '') + classDesc;
      }
    } else {
      return classDesc;
    }
  } // 处理TAG标签


  if (parentNodeIsCommonNode) {
    // 这里注意是 children。 childNodes的话还包含字符串空白等无关的元素节点
    const nodes = ele.parentNode.children;

    for (let i = 0; i < nodes.length; i++) {
      if (nodes[i] === ele) {
        return getDomPath(ele.parentElement) + `${parentNodeIsCommonNode ? prefix : ''}${ele.tagName.toLowerCase()}:nth-child(${i + 1}) `;
      }
    }
  } else {
    return ele.tagName.toLowerCase();
  }

  return '';
};

exports.getDomPath = getDomPath;